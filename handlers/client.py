import asyncio
import datetime
from random import uniform, randint
import json

from aiogram import F, Router, types, Bot
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import VERIF_CHANNEL_ID
from database.db import DataBase
from keyboards.client import ClientKeyboard
from other.filters import ChatJoinFilter, RegisteredFilter
from other.languages import languages

router = Router()


class RegisterState(StatesGroup):
    input_id = State()


class GetSignalStates(StatesGroup):
    chosing_mines = State()


class ChangeReferral(StatesGroup):
    input_ref = State()


# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∏ (–ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º)
POSTBACK_CHAIN = [
    {
        "text": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! ü•≥\n\n–®–∞–≥ 2 - –í–Ω–µ—Å–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç.\n\n‚ú¶ –ß–µ–º –±–æ–ª—å—à–µ –¥–µ–ø–æ–∑–∏—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –£–†–û–í–ï–ù–¨ –≤ –±–æ—Ç–µ, –∞ —á–µ–º –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å –≤ –±–æ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å.\n\n‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç <b>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> –≤ –±–æ—Ç–∞.",
        "button": "–í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç"
    },
    {
        "text": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n",
        "webapp": "first.html",
        "event_next": "bonus_claimed"
    },
    {
        "text": "–ó–ê–ë–ò–†–ê–ô –°–í–û–ò –ë–û–ù–£–°–´ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°\n\n–ü–æ –º–∏–º–æ —Ç–æ–≥–æ —á—Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª +70 –§—Ä–∏—Å–ø–∏–Ω–æ–≤ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –º—ã –î–ê–†–ò–ú —Ç–µ–±–µ –µ—â–µ 1 –∞–∫—Ü–∏—é –≤ –≤–∏–¥–µ —Ä–∞–∑–¥–∞—á–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã!",
        "webapp": "cryptobot.html",
        "webapp_button_text": "üéÅ –ó–∞–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-–±–æ–Ω—É—Å–∫—É",
        "event_next": "crypto_bonus_claimed",
        "button2": "–ó–∞–±—Ä–∞—Ç—å 70 FP"
    },
    {
        "text": "–ß–ï–ö –ö–†–ò–ü–¢–û–ë–û–¢\n\n–í—ã–∏–≥—Ä–∞—Ç—å –º–µ–≥–∞ –±–æ–Ω—É—Å–∫—É!",
        "webapp": "second.html",
        "event_next": "megabonus_claimed"
    },
    {
        "text": "–û–ì–û! –¢–ï–ü–ï–†–¨ –í –†–£–õ–ï–¢–ö–ï –ú–û–ñ–ù–û –í–´–ò–ì–†–ê–¢–¨ –°–†–ê–ó–£ 2 –ü–û–ó–ò–¶–ò–ò!!!\n\n–ü–æ–ª—É—á–∏ –ë–ï–°–ü–†–û–ò–ì–†–´–®–ù–´–ô –®–ê–ù–° X2 –∏ –≤—ã–∏–≥—Ä–∞–π: +220% –ö –î–ï–ü–û–ó–ò–¢–£, –ë–û–ù–£–°–ö–ê –ó–ê 32,000–†, –í–ê–£–ß–ï–† –ù–ê 10,000–† –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n–°—Ö–≤–∞—Ç–∏—Ç—å —É–¥–∞—á—É –∑–∞ —Ö–≤–æ—Å—Ç!",
        "button": "–ü–æ–ª—É—á–∏—Ç—å –®–ê–ù–° X2"
    },
    {
        "text": "–¢–í–û–ô –ß–ê–°!\n\n–•–û–ß–ï–®–¨ –°–û–†–í–ê–¢–¨ –ö–£–®? –®–ê–ù–° X2 –ò–°–ü–û–õ–ù–ò–¢ –¢–í–û–Å –ñ–ï–õ–ê–ù–ò–ï!\n\n–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ 1win –æ—Ç 2000–†, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Ç–µ—Ä—è–µ—à—å, –≤–µ–¥—å –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Ç–≤–æ—ë–º 1win –∞–∫–∫–∞—É–Ω—Ç–µ –∏ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∏—Ö –≤—ã–≤–µ—Å—Ç–∏ üòâ.\n\n–ë–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–π —à–∞–Ω—Å —É–∂–µ —Å–µ–π—á–∞—Å!",
        "button": "–°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000–†"
    },
    {
        "text": "–ï–ï–ï –ë–û–ô!\n\n–¢–´ –í –®–ê–ì–ï –û–¢ –ù–ê–°–¢–û–Ø–©–ï–ô –ë–£–†–ò –ó–ê–ù–û–°–û–í!\n\n–®–∞–Ω—Å X2 —É–∂–µ —É —Ç–µ–±—è –≤ —Ä—É–∫–∞—Ö, –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ó–ê–ë–ò–†–ê–ô –°–†–ê–ó–£ 2 –ü–û–ó–ò–¶–ò–ò!",
        "button": "–ó–∞–±—Ä–∞—Ç—å –®–ê–ù–° X2",
        "webapp": "x2.html",
        "event_next": "x2_claimed"
    },
    {
        "text": "–ê –¢–ï–ü–ï–†–¨ –°–ê–ú–û–ï –ò–ù–¢–ï–†–ï–°–ù–û–ï!\n\n–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ç—ã –∑–∞–±–∏—Ä–∞–µ—à—å –ö–û–ú–ë–û. –û–±—ä—è—Å–Ω—é! –¢—ã –≤—ã–∏–≥—Ä–∞–ª +220% –∫ –¥–µ–ø–æ–∑–∏—Ç—É –∏ –®–ê–ù–° x3 –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 3,500–†\n\n–ü–æ—ç—Ç–æ–º—É —Ç—ã —Å—Ä–∞–∑—É –£–ë–ò–í–ê–ï–®–¨ –î–í–£–• –ó–ê–ô–¶–ï–í, –¥–µ–ª–∞–µ—à—å –¥–µ–ø–æ–∑–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞—ë—Ç—Å—è —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ + –ø–æ–ª—É—á–∞–µ—à—å 220% + –®–ê–ù–° X3! –ù–µ —à–∏–∫–∞—Ä–Ω–æ –ª–∏?",
        "button": "–°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 3500–†"
    },
    {
        "text": "–û –ë–û–ñ–ï –ú–û–ô, –ß–¢–û –¢–ï–ë–Ø –°–ï–ô–ß–ê–° –ñ–î–Å–¢!\n\n–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å, –ø—Ä–æ—Å—Ç–æ –≤ 1 –∫–ª–∏–∫, —Ç—ã –∑–∞–±–∏—Ä–∞–µ—à—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –®–ê–ù–° X3, –¥–æ —ç—Ç–æ–≥–æ –¥–æ–π–¥—É—Ç –µ–¥–∏–Ω–∏—Ü—ã! –ù–æ —Ç–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü–∞–º, –¥–æ—Å—Ç–∞—é—Ç—Å—è –≤—Å–µ —Å–ª–∏–≤–∫–∏ üòâ\n\n–ó–∞–±—Ä–∞—Ç—å —Å–≤–æ—ë",
        "button": "–ó–∞–±—Ä–∞—Ç—å —Å–≤–æ—ë",
        "webapp": "x3.html",
        "event_next": "x3_claimed"
    },
    {
        "text": "–° –≠–¢–û–ô –ë–û–ù–£–°–ö–û–ô –¢–ï–ë–Ø –ñ–î–ï–¢ –ú–ï–ì–ê –ó–ê–ù–û–°!",
        "button": "–ü–æ–ª—É—á–∏—Ç—å –º–µ–≥–∞ –∑–∞–Ω–æ—Å"
    },
    {
        "text": "–ù–£ –í–û–¢ –ò –í–°–ï –¢–´ –ù–ê –§–ò–ù–ò–®–ù–û–ô –ü–†–Ø–ú–û–ô!",
        "button": "–ó–∞–±—Ä–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑",
        "webapp": "last.html",
        "event_next": "final_prize_claimed"
    }
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PostbackChainStates(StatesGroup):
    step = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞
async def get_chain_keyboard(step_idx: int):
    ikb = InlineKeyboardBuilder()
    current_step_data = POSTBACK_CHAIN[step_idx]
    next_step_data_cb = f"postback_chain|{step_idx+1}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É webapp, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if 'webapp' in current_step_data:
        # –î–ª—è –ø–µ—Ä–≤–æ–π –º–∏–Ω–∏–∞–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º first.html, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if current_step_data['webapp'] == 'first.html':
            cache_buster = f"?v={datetime.datetime.now().timestamp()}"
            webapp_url = f"https://48392.github.io/lfulsne/first.html{cache_buster}"
        else:
            cache_buster = f"?v={datetime.datetime.now().timestamp()}"
            webapp_url = f"https://48392.github.io/lfulsne/{current_step_data['webapp']}{cache_buster}"
        button_text = current_step_data.get('webapp_button_text', "üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É")
        ikb.button(text=button_text, web_app=types.WebAppInfo(url=webapp_url))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if 'button' in current_step_data:
        ikb.button(text=current_step_data['button'], callback_data=next_step_data_cb)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if 'button2' in current_step_data:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π
        ikb.button(text=current_step_data['button2'], url="https://telegra.ph")

    return ikb.as_markup()

# –ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–±–µ–∫–∞ (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
async def start_postback_chain(user_id: int, bot: Bot):
    step_idx = 0
    await DataBase.update_current_step(user_id, step_idx)
    await bot.send_message(
        chat_id=user_id,
        text=POSTBACK_CHAIN[step_idx]['text'],
        reply_markup=await get_chain_keyboard(step_idx),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ü–µ–ø–æ—á–∫–∏
@router.callback_query(F.data.startswith("postback_chain|"))
async def postback_chain_callback(callback: types.CallbackQuery, bot: Bot):
    step_idx = int(callback.data.split("|")[1])
    user_id = callback.from_user.id
    
    await DataBase.update_current_step(user_id, step_idx)
    await callback.message.delete()
    
    if step_idx < len(POSTBACK_CHAIN):
        await bot.send_message(
            chat_id=user_id,
            text=POSTBACK_CHAIN[step_idx]['text'],
            reply_markup=await get_chain_keyboard(step_idx),
            parse_mode="HTML"
        )


@router.message(CommandStart())
async def start_command(message: types.Message, user_id: int = 0):
    await message.delete()
    user = await DataBase.get_user_info(message.from_user.id if user_id == 0 else user_id)
    if user is None:
        await get_language(message, True)
        return

    await message.answer(languages[user[2]]["welcome"].format(first_name=message.from_user.first_name),
                         reply_markup=await ClientKeyboard.start_keyboard(user[2]), parse_mode="HTML")


@router.callback_query(F.data.startswith("sel_lang"))
async def select_language(callback: CallbackQuery):
    data = callback.data.split("|")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(data) >= 3 and data[1].isdigit():
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: sel_lang|user_id|lang
        await DataBase.register(callback.from_user.id, data[2])
        await start_command(message=callback.message, user_id=int(data[1]))
    else:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ü–µ–ø–æ—á–∫–∏: sel_lang|postback_chain|step|lang
        # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ select_language_in_chain
        await callback.answer("–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")


@router.callback_query(F.data.startswith("resel_lang"))
async def reselect_language(callback: CallbackQuery):
    data = callback.data.split("|")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(data) >= 3 and data[1].isdigit():
        # –§–æ—Ä–º–∞—Ç: resel_lang|user_id|lang
        await DataBase.update_lang(int(data[1]), data[2])
        await start_command(message=callback.message, user_id=int(data[1]))
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")


@router.callback_query(F.data == "get_lang")
async def get_language(query: Message | CallbackQuery, first: bool = False):
    q = query
    if isinstance(query, CallbackQuery):
        query = query.message
    try:
        await query.delete()
    except:
        pass

    if first:
        prefix = f"sel_lang|{query.from_user.id}"
    else:
        prefix = f"resel_lang|{q.from_user.id}"
    await query.answer("Select language",
                       reply_markup=await ClientKeyboard.languages_board(prefix))


@router.callback_query(F.data == "check", ChatJoinFilter())
async def check_subscription_and_start_chain(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    # –ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await start_postback_chain(callback.from_user.id, callback.bot)
    await callback.answer()


@router.callback_query(F.data == "register")
async def register_handler(callback: types.CallbackQuery, state: FSMContext):
    lang = await DataBase.get_lang(callback.from_user.id)
    if lang is None:
        lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    text = languages[lang]["register_info"]


    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=await ClientKeyboard.register_keyboard(callback, lang))
    await state.set_state(RegisterState.input_id)



@router.callback_query(F.data == "instruction")
async def instruction_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    new_ref_url = f"{(await DataBase.get_ref())}&sub1={user_id}"
    lang = await DataBase.get_lang(callback.from_user.id)
    if lang is None:
        lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    text = languages[lang]["instruction_info"].format(ref_url=new_ref_url)

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(text, reply_markup=await ClientKeyboard.back_keyboard(lang),
                                  parse_mode="HTML")



@router.message(F.chat.func(lambda chat: chat.id == int(VERIF_CHANNEL_ID)))
async def channel_verification_handler(message: types.Message):
    if (await DataBase.get_user(message.text)) is None:
        lang = await DataBase.get_lang(int(message.text))
        if lang is None:
            lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        await DataBase.update_verifed(message.text)
        await message.bot.send_message(chat_id=int(message.text),
                                       text=languages[lang]["success_registration"],
                                       reply_markup=await ClientKeyboard.get_signal_keyboard(lang), parse_mode="HTML")
        await start_postback_chain(int(message.text), message.bot)


@router.callback_query(F.data == "change_ref")
async def change_referral_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    lang = await DataBase.get_lang(callback.from_user.id)
    if lang is None:
        lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    await callback.message.delete()
    await callback.message.answer(languages[lang]["enter_new_ref"])
    await state.set_state(ChangeReferral.input_ref)


@router.message(ChangeReferral.input_ref)
async def change_referral_message_state(message: types.Message, state: FSMContext):
    lang = await DataBase.get_lang(message.from_user.id)
    if lang is None:
        lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    await message.answer(languages[lang]["ref_changed"])
    await DataBase.edit_ref(message.text)
    await state.clear()


@router.message(F.web_app_data)
async def webapp_data_handler(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    print(f"\n[DEBUG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    print(f"[DEBUG] RAW DATA: {message.web_app_data.data}")

    try:
        data = json.loads(message.web_app_data.data)
        event = data.get('event')
        print(f"[DEBUG] –°–æ–±—ã—Ç–∏–µ: {event}")
    except (json.JSONDecodeError, AttributeError):
        print("[DEBUG] –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
        return

    user = await DataBase.get_user_info(user_id)
    if not user or user[4] is None:
        print("[DEBUG] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ –ë–î.")
        return

    current_step_idx = user[4]
    print(f"[DEBUG] –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_step_idx}")

    expected_event = POSTBACK_CHAIN[current_step_idx].get('event_next')
    print(f"[DEBUG] –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞: {expected_event}")

    if event and event == expected_event:
        print("[DEBUG] –£–°–ü–ï–•: –°–æ–±—ã—Ç–∏–µ —Å–æ–≤–ø–∞–ª–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º. –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.")
        next_step_idx = current_step_idx + 1
        await DataBase.update_current_step(user_id, next_step_idx)

        if next_step_idx < len(POSTBACK_CHAIN):
            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ {next_step_idx}.")
            await bot.send_message(
                chat_id=user_id,
                text=POSTBACK_CHAIN[next_step_idx]['text'],
                reply_markup=await get_chain_keyboard(next_step_idx),
                parse_mode="HTML"
            )
    else:
        print("[DEBUG] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–≤–ø–∞–ª–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é.")
